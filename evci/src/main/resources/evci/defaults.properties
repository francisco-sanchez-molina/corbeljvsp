#This a the module default configuration values
# --We should always add a default value for every possible configuration parameter.
dw.http.port=8086
dw.http.adminPort=8087

# RabbitMQ configuration
rabbitmq.host=${RABBITMQ_PORT_5672_TCP_ADDR:localhost}
rabbitmq.port=${RABBITMQ_PORT_5672_TCP_PORT:5672}
rabbitmq.username=guest
rabbitmq.password=guest
rabbitmq.requestedHeartbeat=10
rabbitmq.connectionTimeout=60000

# Eventbus RabbitMQ configuration
eventbus.rabbitmq.host=${RABBITMQ_PORT_5672_TCP_ADDR:localhost}
eventbus.rabbitmq.port=${RABBITMQ_PORT_5672_TCP_PORT:5672}
eventbus.rabbitmq.username=guest
eventbus.rabbitmq.password=guest
eventbus.rabbitmq.requestedHeartbeat=10
eventbus.rabbitmq.connectionTimeout=60000

#Options to backoff on failed messages
rabbitmq.maxAttempts=3
rabbitmq.backoff.initialInterval=1000 
rabbitmq.backoff.multiplier=2.0
rabbitmq.backoff.maxInterval=350000

evci.blocking.queue=1000

# This defines if the REST API is enabled or not. To run evci in worker only mode set this to fase;
evci.rest.enabled=true

evci.plugins.resilient=false

#When this is enabled an access token must be sent on the Authorization heather in order to access secure APIs
auth.enabled=true
#This defines the which access rules this system is interested in
auth.audience=${evci.uri}
#The auth realm is just a name given to the authentication mechanism
auth.realm=OAuth Access Token
#Defines the pattern of paths which are secure and requires authorization token
auth.unAuthenticatedPath=version|plugins

#Auth Redis connection
auth.redis.host=${REDIS_PORT_6379_TCP_ADDR:localhost}
auth.redis.port=${REDIS_PORT_6379_TCP_PORT:6379}
# Uncomment this if you want to use a password for Redis
# auth.redis.password=

# Maximum connections to Redis
auth.redis.maxTotal=50
# Maximum active connections to Redis instance
auth.redis.maxIdle=10
# Minimum number of idle connections to Redis - these can be seen as always open and ready to serve
auth.redis.minIdle=1
# Tests whether connection is dead when connection retrieval method is called
auth.redis.testOnBorrow=true
# Tests whether connection is dead when returning a connection to the pool
auth.redis.testOnReturn=true
# Tests whether connections are dead during idle periods
auth.redis.testWhileIdle=true
# Maximum number of connections to test in each idle check
auth.redis.numTestsPerEvictionRun=1
# Maximum time, in milliseconds, to wait for a resource when auth.redis.blockWhenExhausted is set to true
auth.redis.maxWaitMillis=5000
# Idle connection checking period
auth.redis.timeBetweenEvictionRunsMillis=60000
# Wait when connection pool is exhausted
auth.redis.blockWhenExhausted=true

#CORS settings
cors.enabled=true
cors.allowedOrigins=any

#Eventbus configuration
eventbus.listener.name=evci
eventbus.maxAttempts=5
eventbus.backoff.initialInterval=1000 
eventbus.backoff.multiplier=3.0
eventbus.backoff.maxInterval=350000

#ETag filter enabled
etag.enabled=true

#Signature key - CHANGE TO YOUR OWN SECRET KEY
token.signatureKey=testKey

evci.uri=http://evci.corbel.io